buildscript {
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	}
}
plugins {
	id "org.jetbrains.intellij" version "1.5.2"
	id "org.jetbrains.kotlin.jvm" version "1.6.10"
}
apply plugin:"java"
apply plugin:"groovy"
apply plugin:"idea"
apply plugin:"org.jetbrains.intellij"

repositories {
	mavenCentral()
}

ext.kotlinVersion = "1.6.10"
ext.groovyVersion = "3.0.9" // Matches the version of Groovy bundled with IntelliJ

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

intellij {
	// To find available IDE versions see https://www.jetbrains.com/intellij-repository/releases
	// and https://www.jetbrains.com/intellij-repository/snapshots
	version = System.getenv().getOrDefault("IJ_VERSION",
        "221.5080.210" // Compatibility with IJ 2022.1 (groovy 3, kotlin 1.6, changes in PluginClassLoader https://github.com/dkandalov/live-plugin/issues/123)
        // "LATEST-EAP-SNAPSHOT"
	)
	pluginName = "LivePlugin"
	downloadSources = true
    // Disable patching plugin.xml because "until" version is too restrictive (it's better to keep it open-ended).
	updateSinceUntilBuild = false
	plugins = [
		"java",
		"Groovy",
		"Kotlin",
		"git4idea",
		"github",
		"junit"
	]
}
tasks.buildSearchableOptions {
	enabled = false
}

dependencies {
	implementation project(":kotlin-compiler-wrapper")

	// Bundle kotlin compiler and stdlib with LivePlugin because they are not always included into IDEs
	// and because kotlin jars in IDE are likely to be updated, potentially breaking liveplugins,
	// so it should be more reliable to have a particular version of kotlin jars inside LivePlugin.
	runtimeOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
	runtimeOnly "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlinVersion"
	runtimeOnly "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	runtimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

	// Explicit groovy dependency because even though groovy is bundled with IJ,
	// it's not picked up by groovy compiler in the latest versions.
	compileOnly "org.codehaus.groovy:groovy-all:${groovyVersion}"
	testCompileOnly "org.codehaus.groovy:groovy-all:${groovyVersion}"

	testImplementation group: "junit", name: "junit", version: "4.13.1" // includes hamcrest-core
}
"Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"()
"Add source files to compiler output so that LivePlugin source code is available for navigation at runtime"()
//'Move GDSL file into standardDsls folder'()

sourceSets {
	// Keep groovy and kotlin API source code in separate source sets, otherwise
	// compilation fails because of inter-dependencies between kotlin and groovy files which confuse compiler,
	// even though overall dependencies are unidirectional: pluginApiKotlin -> pluginApiGroovy -> main

	main {
		java { srcDir "src/main" }
		resources { srcDir "resources" }
		resources { srcDir "plugin-examples" }
	}
	pluginApiGroovy {
		groovy { srcDir "src/plugin-api-groovy" }
		compileClasspath = main.output +
			configurations.compileClasspath + configurations.runtimeClasspath +
			configurations.pluginApiGroovyCompileClasspath + configurations.pluginApiGroovyRuntimeClasspath
	}
	pluginApiKotlin {
		kotlin { srcDir "src/plugin-api-kotlin" }
		compileClasspath = main.output + pluginApiGroovy.output +
			configurations.compileClasspath + configurations.pluginApiKotlinCompileClasspath
	}
	test {
		groovy { srcDir "src/test" }
		compileClasspath = main.output + pluginApiGroovy.output +
			configurations.testCompileClasspath + configurations.pluginApiGroovyCompileClasspath
		runtimeClasspath = test.output + main.output + pluginApiGroovy.output +
			configurations.testRuntimeClasspath + configurations.pluginApiGroovyRuntimeClasspath
	}
}

tasks.withType(JavaCompile).configureEach {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}
// Configure kotlinOptions for all tasks for each of the sourcesets specified above.
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	kotlinOptions {
		jvmTarget = "11"
		sourceCompatibility = JavaVersion.VERSION_11
		targetCompatibility = JavaVersion.VERSION_11
		apiVersion = "1.6"
		languageVersion = "1.6"
		freeCompilerArgs = ["-Xjvm-default=all"] // Added for LivePluginKotlinScriptProvider
	}
}

runIde {
	jbrVariant = "jcef"
}

jar {
	from sourceSets.pluginApiGroovy.output, sourceSets.pluginApiKotlin.output
}

task validateLivePluginZip() { doLast {
	def pluginZip = zipTree("build/distributions/LivePlugin.zip")
	def pluginZipFiles = pluginZip.files.collect { it.path.replaceFirst(".*[/\\\\]LivePlugin.zip.*?[/\\\\]", "").replace("\\","/") }

	def kotlinCompilerAndItsTransitiveDependencies = [
		"LivePlugin/kotlin-compiler/annotations-13.0.jar",
		"LivePlugin/kotlin-compiler/jna-5.6.0.jar",
		"LivePlugin/kotlin-compiler/kotlin-compiler-embeddable-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-compiler-wrapper-0.8.jar",
		"LivePlugin/kotlin-compiler/kotlin-daemon-embeddable-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-reflect-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-script-runtime-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-scripting-common-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-scripting-compiler-embeddable-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-scripting-compiler-impl-embeddable-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-scripting-jvm-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-stdlib-1.6.10.jar",
		"LivePlugin/kotlin-compiler/kotlin-stdlib-common-1.6.10.jar",
		"LivePlugin/kotlin-compiler/trove4j-1.0.20181211.jar"
	]
	def expectedLivePluginJars = [
		"LivePlugin/lib/LivePlugin.jar",
		"LivePlugin/lib/standardDsls/livePluginCompletions.gdsl",
	]
	expectToBeEqual(pluginZipFiles.toSorted(), (expectedLivePluginJars + kotlinCompilerAndItsTransitiveDependencies).toSorted())

	def livePluginJar = zipTree(pluginZip.files.find { it.name == "LivePlugin.jar" })
	def livePluginJarFiles = livePluginJar.files.collect{ it.path.replaceFirst(".*[/\\\\]LivePlugin.jar.*?[/\\\\]", "").replace("\\","/") }.toSet()
	expectToContain(livePluginJarFiles, [
		"liveplugin/implementation/LivePlugin.class",
		"liveplugin/PluginUtil.class",
		"liveplugin/PluginUtil.groovy",
		"liveplugin/Plugin_utilKt.class",
		"liveplugin/plugin-util.kt",
		"groovy/default-plugin.groovy",
		"kotlin/default-plugin.kts",
		"META-INF/plugin.xml",
	].toSet())
} }
buildPlugin.finalizedBy(validateLivePluginZip)

static expectToContain(Set actual, Set expected) {
	if (!actual.containsAll(expected)) {
		throw new GradleException(
			"Didn't contain expected:\n" +
			(expected - actual).join("\n") + "\n"
		)
	}
}

static expectToBeEqual(Collection actual, Collection expected) {
	if (actual != expected) {
		throw new GradleException(
			"Expected:\n" +
			expected.join("\n") + "\n" +
			"but was:\n" +
			actual.join("\n")
		)
	}
}

task installLivePlugin() { doLast {
	def version = new File("resources/META-INF/plugin.xml").readLines()
			.find { it.contains("<version>") }
			.replaceFirst(".*<version>", "")
			.replaceFirst("</version>.*", "")
	def localMavenPath = repositories.mavenLocal().url.path + "/liveplugin/live-plugin/"
	def toFile = "${localMavenPath}/${version}/live-plugin-${version}.jar"

	ant.copy(
		file: "LivePlugin.jar",
		toFile: toFile
	)

	println("Installed to local maven liveplugin version " + version)
	println("Path: ${toFile}")
} }

def "Add source files to compiler output so that LivePlugin source code is available for navigation at runtime"() {
	compileJava.doLast {
		def classesFolder = project.tasks.findByName(JavaPlugin.COMPILE_JAVA_TASK_NAME).destinationDir
		ant.copy(toDir: classesFolder.absolutePath, overwrite: true) {
			ant.fileset(dir: "./src/plugin-api-groovy", includes: "**/*")
			ant.fileset(dir: "./src/plugin-api-kotlin", includes: "**/*")
			ant.fileset(dir: "./src/main", includes: "**/LivePluginScript.kt")
		}
	}
}

def "Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"() {
	prepareSandbox.doLast {
		new File("build/idea-sandbox/plugins/LivePlugin/lib")
			.listFiles().toList()
			.findAll { it.name.endsWith(".jar") && it.name != "LivePlugin.jar" }
			.each {
				ant.move(
					file: "build/idea-sandbox/plugins/LivePlugin/lib/${it.name}",
					tofile: "build/idea-sandbox/plugins/LivePlugin/kotlin-compiler/${it.name}"
				)
			}
	}
}

//def "Move GDSL file into standardDsls folder"() {
//	prepareSandbox.doLast {
//		def resourcesFolder = project.tasks.findByName(JavaPlugin.PROCESS_RESOURCES_TASK_NAME).destinationDir
//		ant.move(
//			file: resourcesFolder.absolutePath + "/liveplugin/livePluginCompletions.gdsl",
//			tofile: "build/idea-sandbox/plugins/LivePlugin/lib/standardDsls/livePluginCompletions.gdsl",
//			quiet: true
//		)
//	}
//}
